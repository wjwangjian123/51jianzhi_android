package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.part.jianzhiyi.model.entity.LoginResponseEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_RESPONSE_ENTITY".
*/
public class LoginResponseEntityDao extends AbstractDao<LoginResponseEntity, Long> {

    public static final String TABLENAME = "LOGIN_RESPONSE_ENTITY";

    /**
     * Properties of entity LoginResponseEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Signature = new Property(2, String.class, "signature", false, "SIGNATURE");
        public final static Property Create_time = new Property(3, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Update_time = new Property(4, String.class, "update_time", false, "UPDATE_TIME");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(6, String.class, "email", false, "EMAIL");
        public final static Property Status = new Property(7, String.class, "status", false, "STATUS");
        public final static Property Name = new Property(8, String.class, "name", false, "NAME");
        public final static Property Sex = new Property(9, String.class, "sex", false, "SEX");
        public final static Property Age = new Property(10, String.class, "age", false, "AGE");
        public final static Property School_year = new Property(11, String.class, "school_year", false, "SCHOOL_YEAR");
        public final static Property School_name = new Property(12, String.class, "school_name", false, "SCHOOL_NAME");
        public final static Property Experience = new Property(13, String.class, "experience", false, "EXPERIENCE");
        public final static Property Introduce = new Property(14, String.class, "introduce", false, "INTRODUCE");
        public final static Property Appid = new Property(15, String.class, "appid", false, "APPID");
        public final static Property Resume_complete = new Property(16, String.class, "resume_complete", false, "RESUME_COMPLETE");
        public final static Property ShowResume = new Property(17, boolean.class, "showResume", false, "SHOW_RESUME");
        public final static Property Profession = new Property(18, String.class, "profession", false, "PROFESSION");
        public final static Property Job_status = new Property(19, String.class, "job_status", false, "JOB_STATUS");
        public final static Property Job_type = new Property(20, String.class, "job_type", false, "JOB_TYPE");
        public final static Property Profession_type = new Property(21, int.class, "profession_type", false, "PROFESSION_TYPE");
        public final static Property Job_status_type = new Property(22, int.class, "job_status_type", false, "JOB_STATUS_TYPE");
        public final static Property Job_position_type = new Property(23, String.class, "job_position_type", false, "JOB_POSITION_TYPE");
        public final static Property Resume_active = new Property(24, String.class, "resume_active", false, "RESUME_ACTIVE");
    }


    public LoginResponseEntityDao(DaoConfig config) {
        super(config);
    }
    
    public LoginResponseEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_RESPONSE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USERNAME\" TEXT," + // 1: username
                "\"SIGNATURE\" TEXT," + // 2: signature
                "\"CREATE_TIME\" TEXT," + // 3: create_time
                "\"UPDATE_TIME\" TEXT," + // 4: update_time
                "\"PHONE\" TEXT," + // 5: phone
                "\"EMAIL\" TEXT," + // 6: email
                "\"STATUS\" TEXT," + // 7: status
                "\"NAME\" TEXT," + // 8: name
                "\"SEX\" TEXT," + // 9: sex
                "\"AGE\" TEXT," + // 10: age
                "\"SCHOOL_YEAR\" TEXT," + // 11: school_year
                "\"SCHOOL_NAME\" TEXT," + // 12: school_name
                "\"EXPERIENCE\" TEXT," + // 13: experience
                "\"INTRODUCE\" TEXT," + // 14: introduce
                "\"APPID\" TEXT," + // 15: appid
                "\"RESUME_COMPLETE\" TEXT," + // 16: resume_complete
                "\"SHOW_RESUME\" INTEGER NOT NULL ," + // 17: showResume
                "\"PROFESSION\" TEXT," + // 18: profession
                "\"JOB_STATUS\" TEXT," + // 19: job_status
                "\"JOB_TYPE\" TEXT," + // 20: job_type
                "\"PROFESSION_TYPE\" INTEGER NOT NULL ," + // 21: profession_type
                "\"JOB_STATUS_TYPE\" INTEGER NOT NULL ," + // 22: job_status_type
                "\"JOB_POSITION_TYPE\" TEXT," + // 23: job_position_type
                "\"RESUME_ACTIVE\" TEXT);"); // 24: resume_active
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_RESPONSE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginResponseEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(3, signature);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(4, create_time);
        }
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(5, update_time);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(8, status);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(10, sex);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(11, age);
        }
 
        String school_year = entity.getSchool_year();
        if (school_year != null) {
            stmt.bindString(12, school_year);
        }
 
        String school_name = entity.getSchool_name();
        if (school_name != null) {
            stmt.bindString(13, school_name);
        }
 
        String experience = entity.getExperience();
        if (experience != null) {
            stmt.bindString(14, experience);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(15, introduce);
        }
 
        String appid = entity.getAppid();
        if (appid != null) {
            stmt.bindString(16, appid);
        }
 
        String resume_complete = entity.getResume_complete();
        if (resume_complete != null) {
            stmt.bindString(17, resume_complete);
        }
        stmt.bindLong(18, entity.getShowResume() ? 1L: 0L);
 
        String profession = entity.getProfession();
        if (profession != null) {
            stmt.bindString(19, profession);
        }
 
        String job_status = entity.getJob_status();
        if (job_status != null) {
            stmt.bindString(20, job_status);
        }
 
        String job_type = entity.getJob_type();
        if (job_type != null) {
            stmt.bindString(21, job_type);
        }
        stmt.bindLong(22, entity.getProfession_type());
        stmt.bindLong(23, entity.getJob_status_type());
 
        String job_position_type = entity.getJob_position_type();
        if (job_position_type != null) {
            stmt.bindString(24, job_position_type);
        }
 
        String resume_active = entity.getResume_active();
        if (resume_active != null) {
            stmt.bindString(25, resume_active);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginResponseEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(3, signature);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(4, create_time);
        }
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(5, update_time);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(8, status);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(10, sex);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(11, age);
        }
 
        String school_year = entity.getSchool_year();
        if (school_year != null) {
            stmt.bindString(12, school_year);
        }
 
        String school_name = entity.getSchool_name();
        if (school_name != null) {
            stmt.bindString(13, school_name);
        }
 
        String experience = entity.getExperience();
        if (experience != null) {
            stmt.bindString(14, experience);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(15, introduce);
        }
 
        String appid = entity.getAppid();
        if (appid != null) {
            stmt.bindString(16, appid);
        }
 
        String resume_complete = entity.getResume_complete();
        if (resume_complete != null) {
            stmt.bindString(17, resume_complete);
        }
        stmt.bindLong(18, entity.getShowResume() ? 1L: 0L);
 
        String profession = entity.getProfession();
        if (profession != null) {
            stmt.bindString(19, profession);
        }
 
        String job_status = entity.getJob_status();
        if (job_status != null) {
            stmt.bindString(20, job_status);
        }
 
        String job_type = entity.getJob_type();
        if (job_type != null) {
            stmt.bindString(21, job_type);
        }
        stmt.bindLong(22, entity.getProfession_type());
        stmt.bindLong(23, entity.getJob_status_type());
 
        String job_position_type = entity.getJob_position_type();
        if (job_position_type != null) {
            stmt.bindString(24, job_position_type);
        }
 
        String resume_active = entity.getResume_active();
        if (resume_active != null) {
            stmt.bindString(25, resume_active);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LoginResponseEntity readEntity(Cursor cursor, int offset) {
        LoginResponseEntity entity = new LoginResponseEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // signature
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // create_time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // update_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // email
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // status
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sex
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // age
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // school_year
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // school_name
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // experience
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // introduce
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // appid
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // resume_complete
            cursor.getShort(offset + 17) != 0, // showResume
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // profession
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // job_status
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // job_type
            cursor.getInt(offset + 21), // profession_type
            cursor.getInt(offset + 22), // job_status_type
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // job_position_type
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // resume_active
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginResponseEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSignature(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreate_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpdate_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSex(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAge(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSchool_year(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSchool_name(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setExperience(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIntroduce(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAppid(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setResume_complete(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setShowResume(cursor.getShort(offset + 17) != 0);
        entity.setProfession(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setJob_status(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setJob_type(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setProfession_type(cursor.getInt(offset + 21));
        entity.setJob_status_type(cursor.getInt(offset + 22));
        entity.setJob_position_type(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setResume_active(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LoginResponseEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LoginResponseEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoginResponseEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
