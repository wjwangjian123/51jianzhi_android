package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.part.jianzhiyi.model.entity.MessageResponseEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_RESPONSE_ENTITY".
*/
public class MessageResponseEntityDao extends AbstractDao<MessageResponseEntity, Long> {

    public static final String TABLENAME = "MESSAGE_RESPONSE_ENTITY";

    /**
     * Properties of entity MessageResponseEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Headimg = new Property(1, String.class, "headimg", false, "HEADIMG");
        public final static Property Headimg1 = new Property(2, int.class, "headimg1", false, "HEADIMG1");
        public final static Property Username = new Property(3, String.class, "username", false, "USERNAME");
        public final static Property Company = new Property(4, String.class, "company", false, "COMPANY");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property Price = new Property(6, String.class, "price", false, "PRICE");
        public final static Property Time = new Property(7, String.class, "time", false, "TIME");
        public final static Property DateMonth = new Property(8, String.class, "dateMonth", false, "DATE_MONTH");
        public final static Property Msg1 = new Property(9, String.class, "msg1", false, "MSG1");
        public final static Property Msg2 = new Property(10, String.class, "msg2", false, "MSG2");
        public final static Property Msg3 = new Property(11, String.class, "msg3", false, "MSG3");
        public final static Property IsRed = new Property(12, int.class, "isRed", false, "IS_RED");
        public final static Property CompanyId = new Property(13, String.class, "companyId", false, "COMPANY_ID");
        public final static Property Headimg2 = new Property(14, int.class, "headimg2", false, "HEADIMG2");
        public final static Property Contact = new Property(15, String.class, "contact", false, "CONTACT");
    }


    public MessageResponseEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MessageResponseEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_RESPONSE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"HEADIMG\" TEXT," + // 1: headimg
                "\"HEADIMG1\" INTEGER NOT NULL ," + // 2: headimg1
                "\"USERNAME\" TEXT," + // 3: username
                "\"COMPANY\" TEXT," + // 4: company
                "\"TITLE\" TEXT," + // 5: title
                "\"PRICE\" TEXT," + // 6: price
                "\"TIME\" TEXT," + // 7: time
                "\"DATE_MONTH\" TEXT," + // 8: dateMonth
                "\"MSG1\" TEXT," + // 9: msg1
                "\"MSG2\" TEXT," + // 10: msg2
                "\"MSG3\" TEXT," + // 11: msg3
                "\"IS_RED\" INTEGER NOT NULL ," + // 12: isRed
                "\"COMPANY_ID\" TEXT," + // 13: companyId
                "\"HEADIMG2\" INTEGER NOT NULL ," + // 14: headimg2
                "\"CONTACT\" TEXT);"); // 15: contact
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_MESSAGE_RESPONSE_ENTITY_COMPANY_ID ON \"MESSAGE_RESPONSE_ENTITY\"" +
                " (\"COMPANY_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_RESPONSE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageResponseEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String headimg = entity.getHeadimg();
        if (headimg != null) {
            stmt.bindString(2, headimg);
        }
        stmt.bindLong(3, entity.getHeadimg1());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(5, company);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(7, price);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
 
        String dateMonth = entity.getDateMonth();
        if (dateMonth != null) {
            stmt.bindString(9, dateMonth);
        }
 
        String msg1 = entity.getMsg1();
        if (msg1 != null) {
            stmt.bindString(10, msg1);
        }
 
        String msg2 = entity.getMsg2();
        if (msg2 != null) {
            stmt.bindString(11, msg2);
        }
 
        String msg3 = entity.getMsg3();
        if (msg3 != null) {
            stmt.bindString(12, msg3);
        }
        stmt.bindLong(13, entity.getIsRed());
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(14, companyId);
        }
        stmt.bindLong(15, entity.getHeadimg2());
 
        String contact = entity.getContact();
        if (contact != null) {
            stmt.bindString(16, contact);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageResponseEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String headimg = entity.getHeadimg();
        if (headimg != null) {
            stmt.bindString(2, headimg);
        }
        stmt.bindLong(3, entity.getHeadimg1());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(5, company);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(7, price);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
 
        String dateMonth = entity.getDateMonth();
        if (dateMonth != null) {
            stmt.bindString(9, dateMonth);
        }
 
        String msg1 = entity.getMsg1();
        if (msg1 != null) {
            stmt.bindString(10, msg1);
        }
 
        String msg2 = entity.getMsg2();
        if (msg2 != null) {
            stmt.bindString(11, msg2);
        }
 
        String msg3 = entity.getMsg3();
        if (msg3 != null) {
            stmt.bindString(12, msg3);
        }
        stmt.bindLong(13, entity.getIsRed());
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(14, companyId);
        }
        stmt.bindLong(15, entity.getHeadimg2());
 
        String contact = entity.getContact();
        if (contact != null) {
            stmt.bindString(16, contact);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageResponseEntity readEntity(Cursor cursor, int offset) {
        MessageResponseEntity entity = new MessageResponseEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // headimg
            cursor.getInt(offset + 2), // headimg1
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // username
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // company
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // price
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // dateMonth
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // msg1
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // msg2
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // msg3
            cursor.getInt(offset + 12), // isRed
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // companyId
            cursor.getInt(offset + 14), // headimg2
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // contact
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageResponseEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHeadimg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHeadimg1(cursor.getInt(offset + 2));
        entity.setUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCompany(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrice(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDateMonth(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMsg1(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMsg2(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMsg3(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsRed(cursor.getInt(offset + 12));
        entity.setCompanyId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setHeadimg2(cursor.getInt(offset + 14));
        entity.setContact(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageResponseEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageResponseEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageResponseEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
